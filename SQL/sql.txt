******************************
************************
*****************
This document shows the process of data management and data cleaning and creating the final output for the preprocessing step.

* The whole part of the section was done in PgAdmin and we have used SQL language in order to clean the data an provide the final outpot.

** based on objectives of the research, we have decided to limit our work to few tables including the observation table, the temprature table, the block table, the block accessibity table, tha population table

***At the end of this process, we expect to get three tables as output:
              table 1) "main.csv" -->> "date(data of observation)","block(block number)","temp(day temperature)","prec(precipitation of the day)","access (block accessibility)","pop(block population)","obs(observation density - number of obsservation/day/block)","long(block longitude)","lat(block latitude)"
              
              table 2) "aggregatedByMonth.csv" -->>  "mont(month of observations)", "block(block number)", "pop(block population)", "tem(monthly average temperature in the block)", "prec(monthly average precipitation in the block)", "acces (block accessibility)", "obs(observation density - number of obsservation/month/block)", "long(block longitude)", "lat(block latitude)"
              
              table 3) "AggregateWeek.csv" -->> "week(month of observations)", "block(block number)", "pop(block population)", "acces (block accessibility)", "tem(weekly average temperature in the block)", "prec(weeekly average precipitation in the block)","acces (block accessibility)","obs(observation density - number of obsservation/week/block)", "long(block longitude)", "lat(block latitude)"
              
  
*******************************************************************************************
*******************************************************************************************
*******************************************************************************************
section A : in this section we are going to prepare every needed table individually
************************************************************
************************************************************
block table
***
for the original block table,after creating another table in our personal schema, first we checked the table for duplicate records, missing values and blocks outside netherlands. then we removed those values
_____________________
--creating block table in personal schema, from the public block table: by this query we are only selecting those records with unique values and avoiding duplications
-----
create table s2326965.g3block as
  select distinct on (longit, latit) *
  from public.block
(45020 records)
_____________________
--to remove values that are outside the netherlands
-----
DELETE FROM g3block
WHERE longit = 249 and latit = 0;

DELETE FROM g3block
WHERE longit = 254 and latit = 0;
(45018 records)
_____________________
--to check if there is any missing values in the g3block table
-----
select b.block
from g3block as b
where b.block is NULL or b.geom is NULL 
(there is no missing values in this table)
_____________________



************************************************************
************************************************************
observation table
***
_____________________
--creating observation view in personal schema, based on the project time line (6 month)
-----
create view s2326965.g3observ_v as 
   select * from public.observation
   where obsdate BETWEEN '2017-01-01' AND '2017-06-30'
(2530161 records)
_____________________
--creating observation view in personal schema, based on the project time line (6 month)
-----
create view s2326965.obs_int_v1 as
  select block, obsdate, count(g3observ_v.observer) as obsint
  from s2326965.g3observ_v
  group by obsdate, block
  order by obsdate, block
 (538524 records)
 _____________________
 
 
 
************************************************************
************************************************************
temperature table
***
_____________________
--to see if there is any duplicate values in the tempreture table
-----
select t.block, t.dtime , count(*)
FROM public.temperature as t
group by t.block, t.dtime
HAVING count(*) > 1
(there is not any duplication in this table)
_____________________
--creating temperature table in personal schima, from unique values (records)
-----
create table s2326965.g3temp as
   select * from public.temperature
 (7847617 records)
_____________________
--creating a new column (named date) for temperature date in the temperature table
-----
ALTER TABLE s2326965.g3temp
ADD date date;
_____________________
--set the date values by converting dtime format from integer to date
-----
update s2326965.g3temp
SEt date = date(dtime::TEXT)
_____________________
--create the final temprature table based on the project timeline
-----
create table s2326965.g3temperature as
   select * from s2326965.g3temp
   where date BETWEEN '2017-01-01' AND '2017-06-30'
(7847617 records)



************************************************************
************************************************************
percipitation table
_____________________
--to see if there is any duplicate values in the tempreture table
-----
select p.block, p.dtime , count(*)
  FROM public.precipitation as p
  group by p.block, p.dtime
  HAVING count(*) > 1
(there is not any duplication in this table)
_____________________
--creating an initial precipitation table in personal schima, from unique values (records)
-----
create table s2326965.g3prec as
   select distinct on (lon, lat) * from public.precipitation
 (7280892 records)
_____________________
--creating a new column (named date) for precipitation date in the precipitation table
-----
ALTER TABLE s2326965.g3prec
ADD date date;
_____________________
--set the date values by converting dtime format from integer to date
-----
update s2326965.g3prec
SEt date = date(dtime::TEXT)
_____________________
--create the final temprature table based on the project timeline
-----
create table s2326965.g3precipitation as
   select * from s2326965.g3prec
   where date BETWEEN '2017-01-01' AND '2017-06-30'
 (7280892 records)



************************************************************
************************************************************
block road densify table
***
_____________________
--to see if there is any duplicate values in the road table
-----
select b.block, b.maintainer, count(*)
  FROM public.block_road_access as b
  group by b.block, b.maintainer
  HAVING count(*) > 1
(there is not any duplication in this table)
_____________________
--to create a new road table in the personal schema, we have used group by the block number to calculate the total road length in the block (maintained by different organizations)
create table s2326965.g3road as
  select b.block, sum(b.roadlength)
  FROM public.block_road_access as b
  group by b.block
(34314 records)



************************************************************
************************************************************
population table
***
_____________________
--to see if there is any duplicate values in the population table
-----  
select b.geom, count(*)
  FROM public.demography as b
  group by b.geom
  HAVING count(*) > 1
(there is not any duplication in this table)
_____________________
--to create a table in personal schema from demography table based on the original block. this query will add block numbers to the population table
-----  
CREATE table s2326965.g3population as
  select b.geom, b.block, d.aantal_inw
  from public.demography as d, public.block as b 
  where ST_Contains(b.geom, d.geom)
  (150032 records)
_____________________
--since for each block number in this veiw, there are one to four records, it's time to combine population data from the records with the same block number.
this way we will take care of the fact that for each block from the block table (size 1 km2) there are one to four blocks from the demography table (with the size of 500 m2). So we have to calculate the sum of records that have the same block number.
-----  
_____________________
--to create a column for storing final population in the table
-----
ALTER TABLE s2326965.g3population
ADD population bigint;
_____________________
--to update the population column, replacing negative values with zero
-----
UPDATE s2326965.g3population
SET population = 0
WHERE aantal_inw = -99997

UPDATE s2326965.g3population
SET population=aantal_inw
WHERE aantal_inw <> -99997
_____________________
--aggregate the pop table based on blocks and create a new table demo table
-----
/**/
create table s2326965.g3population_final as
  select pop.block, sum(pop.population) as pop
  from s2326965.g3population as pop
  group by pop.block
(37994 records)



*******************************************************************************************
*******************************************************************************************
*******************************************************************************************
section B : in this section we are going join all tables together based on time and block number
************************************************************
************************************************************
--to combine temperature table with precipitation table based on date and block number
***
create table s2326965.combined_tem_pre as
select t.block, t.temper, p.precip, t.date
from s2326965.g3temperature as t
inner join s2326965.g3precipitation as p on t.dtime = p.dtime AND p.block = t.block
where t.block IN (select block from s2326965.g3block)
(7274919 records)
************************************************************
--to new combined table joining the previous table with road density table
***
create table s2326965.combined_tem_pre_ro as
select c.block,c.date, c.temper,c.precip, r.road_den as acces 
from s2326965.combined_tem_pre as c
inner join s2326965.g3road as r
on c.block = r.block
(6194530 records)
************************************************************
--to create a new combined table joining the previous table with population density table
***
create table s2326965.combined_tem_pre_ro_pop as
select c.block,c.date, c.temper,c.precip, c.acces, p.pop 
from s2326965.combined_tem_pre_ro as c
inner join s2326965.g3population_final as p
on c.block = p.block
(6193987 records)
************************************************************
--to create the main table, by combining combined table with observation table
***
create table main as
select c.block,c.date, c.temper,c.precip, c.acces, c.pop, o.obsint as obs
from s2326965.combined_tem_pre_ro_pop as c
inner join s2326965.obs_int_v1 as o 
on o.obsdate = c.date AND o.block = c.block
(514793 records)




*******************************************************************************************
*******************************************************************************************
*******************************************************************************************
section B : in this section we are creating monthly and weekly aggregated tables
************************************************************
************************************************************
--weekly aggregated table
***
create table s2326965.weeklyAggregated as
select * from s2326965.main

/*to add week column*/
ALTER TABLE s2326965.weeklyAggregated
ADD week varchar(255);

/*to update the week column*/
UPDATE s2326965.weeklyAggregated
SET week = DATE_PART('week',date)

/*to do the aggregation by week*/
create table s2326965.s2326965.weeklyAggregated_final as
select f.week as week, f.block as block, avg(f.pop) as pop, avg(f.acces) as acces, avg(f.temper) as tem, avg(f.precip) as prec, sum(f.obs) as obs
from s2326965.weeklyAggregated as f
group by f.week, f.block
(277886 records)

************************************************************
--monthly aggregated table
***
create table s2326965.monthlyAggregated as
select * from s2326965.main

/*to add week column*/
ALTER TABLE s2326965.monthlyAggregated
ADD mont varchar(255);

/*to update the week column*/
UPDATE s2326965.monthlyAggregated
SET mont = to_char(date,'Mon')

/*to do the aggregation by week*/
create table s2326965.monthlyAggregated_final as
select f.mont as month, f.block as block, avg(f.pop) as pop, avg(f.acces) as acces, avg(f.temper) as tem, avg(f.precip) as prec, sum(f.obs) as obs
from s2326965.monthlyAggregated as f
group by f.mont, f.block
(121968 records)


  
  




